name: Cross-Platform CLI Builder

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write
  actions: read

env:
  CARGO_TERM_COLOR: always
  UPSTREAM_REPO: Start9Labs/start-os
  UPSTREAM_REF: next/major
  UPSTREAM_DIR: start-os

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.set.outputs.tag_name }}
      should_release: ${{ steps.set.outputs.should_release }}
      prerelease: ${{ steps.set.outputs.prerelease }}
    steps:
      - id: set
        shell: bash
        run: |
          TAG=""
          PRERELEASE=false
          SHOULD=false

          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.tag_name }}" ]]; then
            TAG="${{ inputs.tag_name }}"
            SHOULD=true
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG="${{ github.ref_name }}"
            SHOULD=true
          else
            # CI artifacts only (no GitHub Release). Flip SHOULD=true to publish nightlies if desired.
            PRERELEASE=true
            SHOULD=false
          fi

          echo "tag_name=$TAG" >> "$GITHUB_OUTPUT"
          echo "should_release=$SHOULD" >> "$GITHUB_OUTPUT"
          echo "prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"

  build:
    name: Build ${{ matrix.target }}
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-13-large
            rust_target: x86_64-apple-darwin
          - target: aarch64-apple-darwin
            os: macos-13-xlarge
            rust_target: aarch64-apple-darwin
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
            arch_env: x86_64
            rust_target: x86_64-unknown-linux-musl
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04-arm
            arch_env: aarch64
            rust_target: aarch64-unknown-linux-musl

    steps:
      - name: Checkout start-os
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ env.UPSTREAM_REF }}
          fetch-depth: 0
          submodules: recursive
          path: ${{ env.UPSTREAM_DIR }}

      - name: Show upstream commit
        run: |
          git -C "$UPSTREAM_DIR" rev-parse HEAD
          git -C "$UPSTREAM_DIR" submodule status

      - name: Generate GIT_HASH.txt
        working-directory: ${{ env.UPSTREAM_DIR }}
        run: |
          git rev-parse HEAD > GIT_HASH.txt
          echo "GIT_HASH=$(cat GIT_HASH.txt)"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Add Rust target
        run: rustup target add ${{ matrix.rust_target }}

      - name: Cache cargo/target
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ env.UPSTREAM_DIR }}/core
          shared-key: ${{ matrix.rust_target }}
          cache-on-failure: true

      # macOS: build via Makefile (install-cli.sh)
      - name: Build start-cli (macOS via make)
        if: contains(matrix.rust_target, 'apple-darwin')
        working-directory: ${{ env.UPSTREAM_DIR }}
        env:
          # If cross-compiling ever becomes necessary, you can also set:
          # CARGO_BUILD_TARGET: ${{ matrix.rust_target }}
          PLATFORM: ${{ startsWith(matrix.rust_target, 'aarch64') && 'aarch64' || 'x86_64' }}
        run: make cli

      # Linux: build via upstream build-cli.sh to ensure MUSL
      - name: Install zig (Linux musl only)
        if: contains(matrix.rust_target, 'linux-musl')
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.12.0

      - name: Install cargo-zigbuild (Linux musl only)
        if: contains(matrix.rust_target, 'linux-musl')
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-zigbuild

      - name: Hotfix build-cli.sh (typo do -> then)
        if: contains(matrix.rust_target, 'linux-musl')
        working-directory: ${{ env.UPSTREAM_DIR }}
        run: |
          # Patch the known typo to avoid syntax error
          sed -i 's/]; do/]; then/' core/build-cli.sh
          # Sanity check the script parses
          bash -n core/build-cli.sh

      - name: Build start-cli (Linux MUSL via build-cli.sh)
        if: contains(matrix.rust_target, 'linux-musl')
        working-directory: ${{ env.UPSTREAM_DIR }}
        env:
          ENVIRONMENT: docker-registry
          ARCH: ${{ matrix.arch_env }}
          TARGET: ${{ matrix.rust_target }}
          ENFORCE_USE_DOCKER: "0"
        run: ./core/build-cli.sh

      - name: Package artifact
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts

          if [[ "${{ matrix.rust_target }}" == *apple-darwin* ]]; then
            BIN="$HOME/.cargo/bin/start-cli"
          else
            BIN="${UPSTREAM_DIR}/core/target/${{ matrix.rust_target }}/release/start-cli"
          fi

          if [[ ! -f "$BIN" ]]; then
            echo "Binary not found at $BIN"
            exit 1
          fi

          OUT="artifacts/start-cli-${{ matrix.target }}"
          cp "$BIN" "$OUT"
          (strip "$OUT" || llvm-strip "$OUT" || true) 2>/dev/null || true

          pushd artifacts >/dev/null
          tar -czf "start-cli-${{ matrix.target }}.tar.gz" "start-cli-${{ matrix.target }}"
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum "start-cli-${{ matrix.target }}.tar.gz" > "start-cli-${{ matrix.target }}.tar.gz.sha256"
          else
            shasum -a 256 "start-cli-${{ matrix.target }}.tar.gz" > "start-cli-${{ matrix.target }}.tar.gz.sha256"
          fi
          popd >/dev/null

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-binaries-${{ matrix.target }}
          path: artifacts/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.should_release == 'true'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cli-binaries-*
          path: release-binaries
          merge-multiple: true

      - name: Verify artifacts and combine checksums
        working-directory: release-binaries
        run: |
          echo "Downloaded binaries:"
          ls -lh *
          cat *.sha256 > sha256sums.txt
          echo "SHA256 checksums:"
          cat sha256sums.txt

      - name: Generate release notes
        working-directory: release-binaries
        env:
          TAG_NAME: ${{ needs.prepare.outputs.tag_name }}
          UPSTREAM_REPO: ${{ env.UPSTREAM_REPO }}
          UPSTREAM_REF: ${{ env.UPSTREAM_REF }}
        run: |
          {
            echo "## Start CLI $TAG_NAME"
            echo ""
            echo "Built from upstream repository: ${UPSTREAM_REPO} @ ${UPSTREAM_REF}"
            echo ""
            echo "### SHA256 Checksums"
            echo '```'
            cat sha256sums.txt
            echo '```'
          } > release-notes.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-binaries/start-cli-*.tar.gz
            release-binaries/sha256sums.txt
          name: Start CLI ${{ needs.prepare.outputs.tag_name }}
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          body_path: release-binaries/release-notes.txt
          prerelease: ${{ needs.prepare.outputs.prerelease }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
